#-------------------------------------------------------------------------------
# Externally exported classes.
#-------------------------------------------------------------------------------
Exported("Spheral::DataOutput::Restart")

integrator = Template("Spheral::IntegratorSpace::Integrator",
                      "ExtendIntegrator.hh")

exclude(integrator.physicsPackagesBegin)
exclude(integrator.physicsPackagesEnd)
exclude(integrator.boundaryBegin)
exclude(integrator.boundaryEnd)

set_policy(integrator.kernelPtr, return_internal_reference())
set_policy(integrator.physicsPackages, return_internal_reference())
set_policy(integrator.dataBase, return_internal_reference())
set_policy(integrator.boundaryConditions, return_internal_reference())

add_property(integrator, "currentTime", "currentTime")
add_property(integrator, "currentCycle", "currentCycle")
add_property(integrator, "dtMin", "dtMin", "setDtMin")
add_property(integrator, "dtMax", "dtMax", "setDtMax")
add_property(integrator, "lastDt", "lastDt", "setLastDt")
add_property(integrator, "dtGrowth", "dtGrowth", "setDtGrowth")
add_property(integrator, "rigorousBoundaries", "rigorousBoundaries", "setRigorousBoundaries")
add_property(integrator, "verbose", "verbose", "setVerbose")
add_property(integrator, "domainDecompositionIndependent", "domainDecompositionIndependent", "domainDecompositionIndependent")

integrator1d = integrator("Spheral::Dim<1>", "Integrator1d")
integrator2d = integrator("Spheral::Dim<2>", "Integrator2d")
integrator3d = integrator("Spheral::Dim<3>", "Integrator3d")

#set_wrapper(integrator1d.physicsPackages, "integratorPhysicsPackagesWrapper1d")

