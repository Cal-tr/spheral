#-------------------------------------------------------------------------------
# Externally exported types.
#-------------------------------------------------------------------------------
Exported("Spheral::PhysicsSpace::Physics<Spheral::Dim<1> >")
Exported("Spheral::PhysicsSpace::Physics<Spheral::Dim<2> >")
Exported("Spheral::PhysicsSpace::Physics<Spheral::Dim<3> >")

Exported("Spheral::PhysicsSpace::GenericBodyForce<Spheral::Dim<1> >")
Exported("Spheral::PhysicsSpace::GenericBodyForce<Spheral::Dim<2> >")
Exported("Spheral::PhysicsSpace::GenericBodyForce<Spheral::Dim<3> >")

#-------------------------------------------------------------------------------
# General template.
#-------------------------------------------------------------------------------
x = Template("Spheral::PhysicsSpace::PointPotential",
             "ExtendPointPotential.hh")

#-------------------------------------------------------------------------------
# Excluded methods.
#-------------------------------------------------------------------------------
exclude(x.initialize)
exclude(x.finalize)
exclude(x.applyGhostBoundaries)
exclude(x.enforceBoundaries)

#-------------------------------------------------------------------------------
# Policies.
#-------------------------------------------------------------------------------
set_policy(x.origin, return_internal_reference())

#-------------------------------------------------------------------------------
# Properties.
#-------------------------------------------------------------------------------
add_property(x, "G", "G", "setG")
add_property(x, "mass", "mass", "setMass")
add_property(x, "coreRadius", "coreRadius", "setCoreRadius")
add_property(x, "deltaPotentialFraction",
             "deltaPotentialFraction", "setDeltaPotentialFraction")

#-------------------------------------------------------------------------------
# Instantiations.
#-------------------------------------------------------------------------------
x1d = x("Spheral::Dim<1>", "PointPotential1d")
x2d = x("Spheral::Dim<2>", "PointPotential2d")
x3d = x("Spheral::Dim<3>", "PointPotential3d")
