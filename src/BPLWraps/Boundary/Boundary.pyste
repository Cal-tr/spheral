#-------------------------------------------------------------------------------
# Externally exported classes.
#-------------------------------------------------------------------------------
Exported("Spheral::DataOutput::Restart")

#-------------------------------------------------------------------------------
# Generic template.
#-------------------------------------------------------------------------------
boundary = Template("Spheral::BoundarySpace::Boundary", "ExtendBoundary.hh")

#-------------------------------------------------------------------------------
# Excluded methods.
#-------------------------------------------------------------------------------
exclude(boundary.addNodeList)
exclude(boundary.controlBegin)
exclude(boundary.controlEnd)
exclude(boundary.ghostBegin)
exclude(boundary.ghostEnd)
exclude(boundary.violationBegin)
exclude(boundary.violationEnd)

#-------------------------------------------------------------------------------
# Policies.
#-------------------------------------------------------------------------------
set_policy(boundary.boundaryNodeMap, return_internal_reference())
set_policy(boundary.controlNodes, return_internal_reference())
set_policy(boundary.ghostNodes, return_internal_reference())
set_policy(boundary.violationNodes, return_internal_reference())

#-------------------------------------------------------------------------------
# 1-D instantiation.
#-------------------------------------------------------------------------------
boundary1d = boundary("Spheral::Dim<1>", "Boundary1d")

add_method(boundary1d, "applyScalarFieldListGhostBoundary1d")
add_method(boundary1d, "applyVectorFieldListGhostBoundary1d")
add_method(boundary1d, "applyTensorFieldListGhostBoundary1d")
add_method(boundary1d, "applySymTensorFieldListGhostBoundary1d")

rename(boundary1d.applyScalarFieldListGhostBoundary1d, "applyScalarFieldListGhostBoundary")
rename(boundary1d.applyVectorFieldListGhostBoundary1d, "applyVectorFieldListGhostBoundary")
rename(boundary1d.applyTensorFieldListGhostBoundary1d, "applyTensorFieldListGhostBoundary")
rename(boundary1d.applySymTensorFieldListGhostBoundary1d, "applySymTensorFieldListGhostBoundary")

#-------------------------------------------------------------------------------
# 2-D instantiation.
#-------------------------------------------------------------------------------
boundary2d = boundary("Spheral::Dim<2>", "Boundary2d")

add_method(boundary2d, "applyScalarFieldListGhostBoundary2d")
add_method(boundary2d, "applyVectorFieldListGhostBoundary2d")
add_method(boundary2d, "applyTensorFieldListGhostBoundary2d")
add_method(boundary2d, "applySymTensorFieldListGhostBoundary2d")

rename(boundary2d.applyScalarFieldListGhostBoundary2d, "applyScalarFieldListGhostBoundary")
rename(boundary2d.applyVectorFieldListGhostBoundary2d, "applyVectorFieldListGhostBoundary")
rename(boundary2d.applyTensorFieldListGhostBoundary2d, "applyTensorFieldListGhostBoundary")
rename(boundary2d.applySymTensorFieldListGhostBoundary2d, "applySymTensorFieldListGhostBoundary")

#-------------------------------------------------------------------------------
# 3-D instantiation.
#-------------------------------------------------------------------------------
boundary3d = boundary("Spheral::Dim<3>", "Boundary3d")

add_method(boundary3d, "applyScalarFieldListGhostBoundary3d")
add_method(boundary3d, "applyVectorFieldListGhostBoundary3d")
add_method(boundary3d, "applyTensorFieldListGhostBoundary3d")
add_method(boundary3d, "applySymTensorFieldListGhostBoundary3d")

rename(boundary3d.applyScalarFieldListGhostBoundary3d, "applyScalarFieldListGhostBoundary")
rename(boundary3d.applyVectorFieldListGhostBoundary3d, "applyVectorFieldListGhostBoundary")
rename(boundary3d.applyTensorFieldListGhostBoundary3d, "applyTensorFieldListGhostBoundary")
rename(boundary3d.applySymTensorFieldListGhostBoundary3d, "applySymTensorFieldListGhostBoundary")
